{"version":3,"sources":["assets/cubeLithospherePre/prelitho-stay.png","assets/cubeLithospherePost/postlitho-atmo.png","assets/cubeBiosphere/bio-atmo.png","assets/cubeHydrosphere/hydro-stay.png","assets/cubeAtmosphere/atmo-plant.png","assets/cubeAtmosphere/atmo-water.png","assets/cubeAtmosphere/atmo-stay.png","assets/cubeBiosphere/bio-lith.png","assets/cubeLithospherePost/postlitho-stay.png","assets/cubeBiosphere/bio-stay.png","assets/cubeHydrosphere/hydro-atmo.png","assets/cubeHydrosphere/hydro-bio.png","assets/cubeHydrosphere/hydro-litho.png","assets/cubeLithospherePre/prelitho-atmo.png","assets/landscapeTexture/px.png","assets/landscapeTexture/nx.png","assets/landscapeTexture/py.png","assets/landscapeTexture/ny.png","assets/landscapeTexture/pz.png","assets/landscapeTexture/nz.png","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","rollResultTransitionMs","parseInt","getComputedStyle","document","documentElement","getPropertyValue","replace","NORMALS","extend","OrbitControls","cubeLoader","CubeTextureLoader","textureLoader","TextureLoader","landscapeTexture","load","require","atmosphereCubeFaces","atmoPlant","atmoStay","atmoWater","biosphereCubeFaces","bioAtmo","bioLith","bioStay","hydrosphereCubeFaces","hydroAtmo","hydroStay","hydroBio","hydroLitho","lithospherePreCubeFaces","prelithoAtmo","prelithoStay","lithospherePostCubeFaces","postlithoAtmo","postlithoStay","atmosphereCubeTexture","map","face","biosphereCubeTexture","hydrosphereCubeTexture","lithospherePreCubeTexture","lithospherePostCubeTexture","rand","k","Math","random","randPlusMinusOne","material","friction","restitution","Cube","setApi","readyState","setReadyState","textures","showRollResult","useBox","mass","args","position","velocity","angularVelocity","ref","api","rotation","useRef","Euler","Vector3","useEffect","subscribe","v","current","x","y","z","useFrame","length","matrix","Matrix4","extractRotation","some","normal","i","direction","applyMatrix4","receiveShadow","castShadow","attach","texture","key","uuid","attachArray","WALL_ARGS","BOX_LENGTH","MESH_WALL_ARGS","Planes","usePlane","PI","groundRef","backWallRef","leftWallRef","rightWallRef","frontWallRef","name","color","metalness","roughness","envMap","transparent","side","DoubleSide","opacity","Scene","props","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-radius","gravity","cubeState","setCubeState","cubeTexture","App","useState","isPostIndustrial","setIsPostIndustrial","floor","sphereIndex","setSphereIndexUnsafe","spheres","faces","cubeFaces","sphereName","rollResult","setRollResult","rollResultClass","setRollResultClass","hideRollResult","setTimeout","undefined","rollDice","set","isValidRollResult","className","style","height","width","camera","shadowMap","src","alt","margin","onClick","type","onChange","evt","target","checked","data","borderColor","setSphereIndex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,2C,iBCA3CD,EAAOC,QAAU,IAA0B,4C,uBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,2FCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,2WCkCrCC,EAAyBC,SAC7BC,iBAAiBC,SAASC,iBACvBC,iBAAiB,4BACjBC,QAAQ,KAAM,KAGbC,EAAU,CACd,CAAC,EAAG,EAAG,GACP,EAAE,EAAG,EAAG,GACR,CAAC,EAAG,EAAG,GACP,CAAC,GAAI,EAAG,GACR,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,GAAI,IAQVC,YAAO,CAAEC,oBAET,IAAMC,EAAa,IAAIC,oBACjBC,EAAgB,IAAIC,gBAEpBC,EAAmBJ,EAAWK,KAAK,CACvCC,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,MAGJC,EAAsB,CAC1BC,IACAC,IACAC,IACAF,IACAC,IACAC,KAGIC,EAAqB,CACzBC,IACAC,IACAD,IACAC,IACAD,IACAE,KAGIC,EAAuB,CAC3BC,IACAC,IACAC,IACAD,IACAE,IACAF,KAGIG,EAA0B,CAC9BC,IACAC,IACAA,IACAA,IACAA,IACAA,KAGIC,EAA2B,CAC/BC,IACAA,IACAC,IACAD,IACAA,IACAC,KAGIC,EAAwBnB,EAAoBoB,KAAI,SAACC,GAAD,OACpD1B,EAAcG,KAAKuB,MAEfC,EAAuBlB,EAAmBgB,KAAI,SAACC,GAAD,OAClD1B,EAAcG,KAAKuB,MAEfE,EAAyBf,EAAqBY,KAAI,SAACC,GAAD,OACtD1B,EAAcG,KAAKuB,MAEfG,EAA4BX,EAAwBO,KAAI,SAACC,GAAD,OAC5D1B,EAAcG,KAAKuB,MAEfI,GAA6BT,EAAyBI,KAAI,SAACC,GAAD,OAC9D1B,EAAcG,KAAKuB,MAEfK,GAAO,SAACC,GAAD,OAA+C,GAAvBC,KAAKC,SAAW,IAAWF,GAC1DG,GAAmB,kBAAeF,KAAKC,SAAW,GAAM,GAAK,GAwB7DE,GAAW,CACfC,SAAU,GACVC,YAAa,IAGTC,GAAO,SAAC,GAYM,IAXlBC,EAWiB,EAXjBA,OACAC,EAUiB,EAVjBA,WACAC,EASiB,EATjBA,cACAC,EAQiB,EARjBA,SACAC,EAOiB,EAPjBA,eAOiB,EACEC,aAAO,iBAAO,CAC/BC,KAxHc,EAyHdV,YACAW,KAAM,CA5Hc,OA6HpBC,SAAU,CAAC,EAAG,EAAG,GACjBC,SAAU,CAAC,EAAG,EAAG,GACjBC,gBAAiB,CAAC,EAAG,EAAG,OAPT,mBACVC,EADU,KACLC,EADK,KAUXC,EAAWC,iBAAO,IAAIC,SACtBN,EAAWK,iBAAO,IAAIE,WA8C5B,OA5CAC,qBAAU,WACRL,EAAIC,SAASK,WAAU,SAACC,GACtBN,EAASO,QAAQC,EAAIF,EAAE,GACvBN,EAASO,QAAQE,EAAIH,EAAE,GACvBN,EAASO,QAAQG,EAAIJ,EAAE,MAEzBP,EAAIH,SAASS,WAAU,SAACC,GACtBV,EAASW,QAAQC,EAAIF,EAAE,GACvBV,EAASW,QAAQE,EAAIH,EAAE,GACvBV,EAASW,QAAQG,EAAIJ,EAAE,QAGxB,IAEHK,aAAS,WAAO,IAAD,EAIb,GAHmB,SAAfvB,GAAyBQ,EAASW,QAAQK,SAAW,IACvDvB,EAAc,aAGC,cAAfD,GACAQ,EAASW,QAAQK,SAAW,MAD5B,UAEAd,EAAIS,eAFJ,aAEA,EAAaM,QACb,CAAC,IAAD,EACMA,EAAS,IAAIC,UACnBD,EAAOE,gBAAP,UAAuBjB,EAAIS,eAA3B,aAAuB,EAAaM,QAEvB,UAAOvE,GACZ0E,MAAK,SAACC,EAAQC,GACpB,IAAMC,EAAY,IAAIhB,UAAQc,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAE3D,OADAE,EAAUC,aAAaP,GACnBM,EAAUV,EAAI,KAChBpB,EAAc,WACdE,EAAe2B,IACR,UAOfd,qBAAU,WACRjB,EAAOY,KACN,CAACZ,EAAQY,IAGV,0BAAMsB,eAAa,EAACC,YAAU,EAACxB,IAAKA,GAClC,uCACEyB,OAAO,WACP7B,KAAM,CArLU,SAuLjBJ,EAASlB,KAAI,SAAAoD,GACZ,OACE,yCACEC,IAAKD,EAAQE,KACbC,YAAY,WACZvD,IAAKoD,SAQXI,GAAY,CAACC,GAAgBA,GAAgB,GAAK,IAAK,IAAK,IAC5DC,GAAiBF,GAIjBG,GAAS,WAAoB,IAAD,EACZC,aAAS,iBAAO,CAClCjD,YACAY,SAAU,CAAC,EAAG,EAAG,GACjBK,SAAU,EAAEpB,KAAKqD,GAAK,EAAG,EAAG,OAHvBC,EADyB,sBAOV1C,aAAO,iBAAO,CAClCT,YACAY,SAAU,CAAC,EAjNI,QAkNfD,KAAMkC,OAHDO,EAPyB,sBAaV3C,aAAO,iBAAO,CAClCT,YACAW,KAAMkC,GACNjC,SAAU,EAxNK,MAwNqB,GACpCK,SAAU,EAAEpB,KAAKqD,GAAK,GAAIrD,KAAKqD,GAAK,EAAG,OAJlCG,EAbyB,sBAoBT5C,aAAO,iBAAO,CACnCT,YACAW,KAAMkC,GACNjC,SAAU,CA/NK,MA+NoB,GACnCK,SAAU,EAAEpB,KAAKqD,GAAK,GAAIrD,KAAKqD,GAAK,EAAG,OAJlCI,EApByB,sBA2BT7C,aAAO,iBAAO,CACnCT,YACAW,KAAMkC,GACNjC,SAAU,CAAC,EAtOI,WAmOV2C,EA3ByB,oBAqChC,OACE,oCACE,0BAAMxC,IAAKoC,EAAWb,eAAa,EAACkB,KAAK,UACvC,yCAAqBhB,OAAO,WAAW7B,KAAM,CAAC,GAAI,MAClD,yCAAqB6B,OAAO,WAAWiB,MAAM,UAG/C,0BAAM1C,IAAKqC,GACT,uCAAmBZ,OAAO,WAAW7B,KAAMoC,KAC3C,0CACEW,UAdU,GAeVC,UAdU,GAeVnB,OAAO,WACPiB,MAAM,OACNG,OAAQ9F,EACR+F,aAAW,EACXC,KAAMC,aACNC,QAnBQ,MAuBZ,0BAAMjD,IAAKsC,GACT,uCAAmBb,OAAO,WAAW7B,KAAMoC,KAC3C,0CACEW,UA5BU,GA6BVC,UA5BU,GA6BVnB,OAAO,WACPiB,MAAM,OACNG,OAAQ9F,EACR+F,aAAW,EACXC,KAAMC,aACNC,QAjCQ,MAqCZ,0BAAMjD,IAAKuC,GACT,uCAAmBd,OAAO,WAAW7B,KAAMoC,KAC3C,0CACEW,UA1CU,GA2CVC,UA1CU,GA2CVnB,OAAO,WACPiB,MAAM,OACNG,OAAQ9F,EACR+F,aAAW,EACXC,KAAMC,aACNC,QA/CQ,MAmDZ,0BAAMjD,IAAKwC,GACT,uCAAmBf,OAAO,WAAW7B,KAAMoC,KAC3C,0CACEW,UAxDU,GAyDVC,UAxDU,GAyDVnB,OAAO,WACPiB,MAAM,OACNG,OAAQ9F,EACR+F,aAAW,EACXC,KAAMC,aACNC,QA7DQ,QAoEZC,GAAQ,SAACC,GAOb,OACE,oCACE,uCACA,gCACEtD,SAAU,CAAC,GAAI,GAAI,IACnBuD,UAAW,EACX5B,YAAU,EACV6B,uBAAsB,KACtBC,wBAAuB,KACvBC,gBAAe,KAEjB,kBAAC,IAAD,CAASC,QAAS,CAAC,GAnUT,GAmUqB,IAC7B,kBAAC,GAAD,CACEnE,OAAQ8D,EAAM9D,OACdC,WAAY6D,EAAMM,UAClBlE,cAAe4D,EAAMO,aACrBlE,SAAU2D,EAAMQ,YAChBlE,eAAgB0D,EAAM1D,iBAExB,kBAAC,GAAD,SA8JOmE,GAxJH,WACV,IAD6B,EAGmBC,oBAAS,GAH5B,mBAGtBC,EAHsB,KAGJC,EAHI,OAIeF,mBAC1C/E,KAAKkF,MAJS,EAIHlF,KAAKC,WALW,mBAItBkF,EAJsB,KAITC,EAJS,KAYvBC,EAAU,CACd,CACE1B,KAAM,aACN2B,MAAOlH,EACPwE,QAASrD,EACTqE,MAAO,aAET,CACED,KAAM,YACN2B,MAAO9G,EACPoE,QAASlD,EACTkE,MAAO,SAET,CACED,KAAM,cACN2B,MAAO1G,EACPgE,QAASjD,EACTiE,MAAO,QAET,CACED,KAAM,cACN2B,MAAON,EACH5F,EACAH,EACJ2D,QAASoC,EACLnF,GACAD,EACJgE,MAAO,UAIL2B,EAAYF,EAAQF,GAAaG,MACjCT,EAAcQ,EAAQF,GAAavC,QACnC4C,EAAaH,EAAQF,GAAaxB,KA7CX,EA+CPoB,qBA/CO,mBA+CtB5D,EA/CsB,KA+CjBZ,EA/CiB,OAgDKwE,mBAAS,QAhDd,mBAgDtBJ,EAhDsB,KAgDXC,EAhDW,OAkDOG,qBAlDP,mBAkDtBU,EAlDsB,KAkDVC,EAlDU,OAmDiBX,mBAAS,QAnD1B,mBAmDtBY,EAnDsB,KAmDLC,EAnDK,KA0DvBC,EAAiB,WACrBD,EAAmB,QAEnBE,YAAW,WACTJ,OAAcK,KACb5I,IAGC6I,EAAW,WAAa,IAAD,EAC3BH,IAD2B,MA3TmB,CAChD5E,gBAAiB,IAAIM,UACnBzB,GAAK,GAAKE,KAAKqD,GACfvD,GAAK,GAAKE,KAAKqD,GACfvD,GAAK,GAAKE,KAAKqD,IAEjBrC,SAAU,IAAIO,UACZrB,MAA4C,IAArBF,KAAKC,SAAW,GAAU,IAC3B,GAArBD,KAAKC,SAAW,GACjBC,MAA4C,IAArBF,KAAKC,SAAW,GAAU,KAEnDc,SAAU,IAAIQ,UAAQzB,GAAK,GAAK,EAAG,GAAIA,GAAK,GAAK,IAmTvCkB,EAHmB,EAGnBA,SAAUC,EAHS,EAGTA,gBAAiBF,EAHR,EAGQA,SAEhC,OAAHI,QAAG,IAAHA,KAAKJ,SAASkF,IAAIlF,EAASa,EAAGb,EAASc,EAAGd,EAASe,GAChD,OAAHX,QAAG,IAAHA,KAAKC,SAAS6E,IAAI,EAAG,EAAG,GACrB,OAAH9E,QAAG,IAAHA,KAAKH,SAASiF,IAAIjF,EAASY,EAAGZ,EAASa,EAAGb,EAASc,GAChD,OAAHX,QAAG,IAAHA,KAAKF,gBAAgBgF,IACnBhF,EAAgBW,EAChBX,EAAgBY,EAChBZ,EAAgBa,GAEf,OAAHX,QAAG,IAAHA,GAAA,UAAAA,EAAKN,YAAL,SAAWoF,IA7ZG,GA+ZdrB,EAAa,SAGTsB,EACU,MAAdT,GAAsBA,GAAc,GAAKA,GAAc,EAEzD,OACE,yBAAKU,UAAU,OACb,kBAAC,IAAD,CACEC,MAAO,CAAEC,OAAQ,QAASC,MAAO,QACjCC,OAAQ,CAAExF,SAAU,CAAC,EAAG,GAAI,KAAMK,SAAU,EAAE,IAAM,EAAG,IACvDoF,WAAS,GAET,kBAAC,GAAD,CACEjG,OAAQA,EACRoE,UAAWA,EACXC,aAAcA,EACdC,YAAaA,EACblE,eA9Ce,SAAC2B,GACtBsD,EAAmB,QACnBF,EAAcpD,OA+CZ,yBAAK6D,UAAS,8BAAyBR,IACpCO,GACC,yBAAKO,IAAKlB,EAAUE,GAAuBiB,IAAI,MAInD,yBAAKP,UAAU,eACZX,EACe,gBAAfA,GACC,wBAAIY,MAAO,CAAEO,OAAQ,IAArB,IACI3B,EAAmB,kBAAoB,iBAD3C,MAMJ,yBAAKmB,UAAU,cACb,4BAAQA,UAAU,WAAWS,QAAS,kBAAYZ,MAAlD,QAGA,yBAAKG,UAAU,SACZnB,EAAmB,kBAAoB,kBAE1C,2BAAOmB,UAAU,4BACf,2BACEU,KAAK,WACLC,SAAU,SAACC,GACT9B,EAAoB8B,EAAIC,OAAOC,YAGnC,0BAAMd,UAAU,kBAElB,yBAAKA,UAAU,SAAf,kBACCd,EAAQ7F,KAAI,SAAC0H,EAAM5E,GAAP,OACX,4BACEO,IAAKqE,EAAKvD,KACVwC,UAAU,yBACVC,MAAO,CAAExC,MAAOsD,EAAKtD,MAAOuD,YAAaD,EAAKtD,OAC9CgD,QAAS,YAnII,SAACtE,GAClBA,GARU,GAQMA,GAAK,GAAG8C,EAAqB9C,GAmIvC8E,CAAe9E,GACfuD,MAGDqB,EAAKvD,YCtgBE0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFtK,SAASuK,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e1f7dc86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/prelitho-stay.41a347e3.png\";","module.exports = __webpack_public_path__ + \"static/media/postlitho-atmo.6d9af7bb.png\";","module.exports = __webpack_public_path__ + \"static/media/bio-atmo.08d0e11b.png\";","module.exports = __webpack_public_path__ + \"static/media/hydro-stay.3c886bbd.png\";","module.exports = __webpack_public_path__ + \"static/media/atmo-plant.1100d1f8.png\";","module.exports = __webpack_public_path__ + \"static/media/atmo-water.5529a4d3.png\";","module.exports = __webpack_public_path__ + \"static/media/atmo-stay.ea5d24e5.png\";","module.exports = __webpack_public_path__ + \"static/media/bio-lith.fd44ea7f.png\";","module.exports = __webpack_public_path__ + \"static/media/postlitho-stay.71a49219.png\";","module.exports = __webpack_public_path__ + \"static/media/bio-stay.314c5778.png\";","module.exports = __webpack_public_path__ + \"static/media/hydro-atmo.94591631.png\";","module.exports = __webpack_public_path__ + \"static/media/hydro-bio.2a63d6ce.png\";","module.exports = __webpack_public_path__ + \"static/media/hydro-litho.bc51b8f7.png\";","module.exports = __webpack_public_path__ + \"static/media/prelitho-atmo.b9cb90d3.png\";","module.exports = __webpack_public_path__ + \"static/media/px.941fa3c0.png\";","module.exports = __webpack_public_path__ + \"static/media/nx.6d39d2fd.png\";","module.exports = __webpack_public_path__ + \"static/media/py.44b672f3.png\";","module.exports = __webpack_public_path__ + \"static/media/ny.14fb552a.png\";","module.exports = __webpack_public_path__ + \"static/media/pz.60b2f35e.png\";","module.exports = __webpack_public_path__ + \"static/media/nz.b2034567.png\";","import React, { useState, useEffect, useRef } from 'react'\nimport './App.css'\nimport {\n  Vector3,\n  Matrix4,\n  Euler,\n  CubeTextureLoader,\n  TextureLoader,\n  DoubleSide,\n  Texture,\n} from 'three'\nimport { Physics, usePlane, useBox, Api } from 'use-cannon'\nimport { Canvas, useFrame, extend } from 'react-three-fiber'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nimport atmoPlant from './assets/cubeAtmosphere/atmo-plant.png'\nimport atmoWater from './assets/cubeAtmosphere/atmo-water.png'\nimport atmoStay from './assets/cubeAtmosphere/atmo-stay.png'\n\nimport bioAtmo from './assets/cubeBiosphere/bio-atmo.png'\nimport bioLith from './assets/cubeBiosphere/bio-lith.png'\nimport bioStay from './assets/cubeBiosphere/bio-stay.png'\n\nimport hydroAtmo from './assets/cubeHydrosphere/hydro-atmo.png'\nimport hydroBio from './assets/cubeHydrosphere/hydro-bio.png'\nimport hydroLitho from './assets/cubeHydrosphere/hydro-litho.png'\nimport hydroStay from './assets/cubeHydrosphere/hydro-stay.png'\n\nimport prelithoAtmo from './assets/cubeLithospherePre/prelitho-atmo.png'\nimport prelithoStay from './assets/cubeLithospherePre/prelitho-stay.png'\n\nimport postlithoAtmo from './assets/cubeLithospherePost/postlitho-atmo.png'\nimport postlithoStay from './assets/cubeLithospherePost/postlitho-stay.png'\n\nconst rollResultTransitionMs = parseInt(\n  getComputedStyle(document.documentElement)\n    .getPropertyValue('--roll-result-transition')\n    .replace(/ms/, ''),\n)\n\nconst NORMALS = [\n  [1, 0, 0],\n  [-1, 0, 0],\n  [0, 1, 0],\n  [0, -1, 0],\n  [0, 0, 1],\n  [0, 0, -1],\n]\n\nconst GRAVITY = -50\nconst DICE_SIDELENGTH = 4\nconst BOX_LENGTH = 10\nconst DICE_MASS = 5\n\nextend({ OrbitControls })\n\nconst cubeLoader = new CubeTextureLoader()\nconst textureLoader = new TextureLoader()\n\nconst landscapeTexture = cubeLoader.load([\n  require('./assets/landscapeTexture/px.png'),\n  require('./assets/landscapeTexture/nx.png'),\n  require('./assets/landscapeTexture/py.png'),\n  require('./assets/landscapeTexture/ny.png'),\n  require('./assets/landscapeTexture/pz.png'),\n  require('./assets/landscapeTexture/nz.png'),\n])\n\nconst atmosphereCubeFaces = [\n  atmoPlant,\n  atmoStay,\n  atmoWater,\n  atmoPlant,\n  atmoStay,\n  atmoWater,\n]\n\nconst biosphereCubeFaces = [\n  bioAtmo,\n  bioLith,\n  bioAtmo,\n  bioLith,\n  bioAtmo,\n  bioStay,\n]\n\nconst hydrosphereCubeFaces = [\n  hydroAtmo,\n  hydroStay,\n  hydroBio,\n  hydroStay,\n  hydroLitho,\n  hydroStay,\n]\n\nconst lithospherePreCubeFaces = [\n  prelithoAtmo,\n  prelithoStay,\n  prelithoStay,\n  prelithoStay,\n  prelithoStay,\n  prelithoStay,\n]\n\nconst lithospherePostCubeFaces = [\n  postlithoAtmo,\n  postlithoAtmo,\n  postlithoStay,\n  postlithoAtmo,\n  postlithoAtmo,\n  postlithoStay,\n]\n\nconst atmosphereCubeTexture = atmosphereCubeFaces.map((face) =>\n  textureLoader.load(face),\n)\nconst biosphereCubeTexture = biosphereCubeFaces.map((face) =>\n  textureLoader.load(face),\n)\nconst hydrosphereCubeTexture = hydrosphereCubeFaces.map((face) =>\n  textureLoader.load(face),\n)\nconst lithospherePreCubeTexture = lithospherePreCubeFaces.map((face) =>\n  textureLoader.load(face),\n)\nconst lithospherePostCubeTexture = lithospherePostCubeFaces.map((face) =>\n  textureLoader.load(face),\n)\nconst rand = (k: number): number => (Math.random() - 0.5) * 2 * k\nconst randPlusMinusOne = (): 1 | -1 => (Math.random() > 0.5 ? 1 : -1)\n\ninterface PhysicsProps {\n  angularVelocity: Vector3\n  velocity: Vector3\n  position: Vector3\n}\n\nconst generatePhysicsProps = (): PhysicsProps => ({\n  angularVelocity: new Vector3(\n    rand(8) * Math.PI,\n    rand(8) * Math.PI,\n    rand(8) * Math.PI,\n  ),\n  velocity: new Vector3(\n    randPlusMinusOne() * ((Math.random() + 1) * 10 + 10),\n    (Math.random() + 1) * 3,\n    randPlusMinusOne() * ((Math.random() + 1) * 10 + 10),\n  ),\n  position: new Vector3(rand(2) + 2, 10, rand(2) + 2),\n})\n\ntype ApiType = Api[1]\n\nconst material = {\n  friction: 0.1,\n  restitution: 0.3,\n}\n\nconst Cube = ({\n  setApi,\n  readyState,\n  setReadyState,\n  textures,\n  showRollResult,\n}: {\n  setApi: (api: ApiType) => void\n  readyState: string\n  setReadyState: (state: string) => void\n  textures: Texture[]\n  showRollResult: (i: number) => void\n}): JSX.Element => {\n  const [ref, api] = useBox(() => ({\n    mass: DICE_MASS,\n    material,\n    args: [DICE_SIDELENGTH, DICE_SIDELENGTH, DICE_SIDELENGTH],\n    position: [0, 2, 0],\n    velocity: [0, 0, 0],\n    angularVelocity: [0, 0, 0],\n  }))\n\n  const rotation = useRef(new Euler())\n  const velocity = useRef(new Vector3())\n\n  useEffect(() => {\n    api.rotation.subscribe((v) => {\n      rotation.current.x = v[0]\n      rotation.current.y = v[1]\n      rotation.current.z = v[2]\n    })\n    api.velocity.subscribe((v) => {\n      velocity.current.x = v[0]\n      velocity.current.y = v[1]\n      velocity.current.z = v[2]\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useFrame(() => {\n    if (readyState === 'init' && velocity.current.length() > 0.5) {\n      setReadyState('in-motion')\n    }\n    if (\n      readyState === 'in-motion' &&\n      velocity.current.length() < 0.05 &&\n      ref.current?.matrix\n    ) {\n      const matrix = new Matrix4()\n      matrix.extractRotation(ref.current?.matrix)\n\n      const normals = [...NORMALS]\n      normals.some((normal, i) => {\n        const direction = new Vector3(normal[0], normal[1], normal[2])\n        direction.applyMatrix4(matrix)\n        if (direction.y > 0.9) {\n          setReadyState('stopped')\n          showRollResult(i)\n          return true\n        }\n        return false\n      })\n    }\n  })\n\n  useEffect(() => {\n    setApi(api)\n  }, [setApi, api])\n\n  return (\n    <mesh receiveShadow castShadow ref={ref}>\n      <boxBufferGeometry\n        attach=\"geometry\"\n        args={[DICE_SIDELENGTH, DICE_SIDELENGTH, DICE_SIDELENGTH]}\n      />\n      {textures.map(texture => {\n        return (\n          <meshLambertMaterial\n            key={texture.uuid}\n            attachArray=\"material\"\n            map={texture}\n          />\n        )\n      })}\n    </mesh>\n  )\n}\n\nconst WALL_ARGS = [BOX_LENGTH * 2, BOX_LENGTH * 2, 0.1, 100, 100, 10]\nconst MESH_WALL_ARGS = WALL_ARGS as [\n  number | number | number | number | number | number,\n]\n\nconst Planes = (): JSX.Element => {\n  const [groundRef] = usePlane(() => ({\n    material,\n    position: [0, 0, 0],\n    rotation: [-Math.PI / 2, 0, 0],\n  }))\n\n  const [backWallRef] = useBox(() => ({\n    material,\n    position: [0, BOX_LENGTH, -BOX_LENGTH],\n    args: WALL_ARGS,\n  }))\n\n  const [leftWallRef] = useBox(() => ({\n    material,\n    args: WALL_ARGS,\n    position: [-BOX_LENGTH, BOX_LENGTH, 0],\n    rotation: [-Math.PI / 2, -Math.PI / 2, 0],\n  }))\n\n  const [rightWallRef] = useBox(() => ({\n    material,\n    args: WALL_ARGS,\n    position: [BOX_LENGTH, BOX_LENGTH, 0],\n    rotation: [-Math.PI / 2, -Math.PI / 2, 0],\n  }))\n\n  const [frontWallRef] = useBox(() => ({\n    material,\n    args: WALL_ARGS,\n    position: [0, BOX_LENGTH, BOX_LENGTH],\n  }))\n\n  const metalness = 0.9\n  const roughness = 0.1\n  const opacity = 0.1\n\n  return (\n    <>\n      <mesh ref={groundRef} receiveShadow name=\"ground\">\n        <planeBufferGeometry attach=\"geometry\" args={[20, 20]} />\n        <meshLambertMaterial attach=\"material\" color=\"#444\" />\n      </mesh>\n\n      <mesh ref={backWallRef}>\n        <boxBufferGeometry attach=\"geometry\" args={MESH_WALL_ARGS} />\n        <meshStandardMaterial\n          metalness={metalness}\n          roughness={roughness}\n          attach=\"material\"\n          color=\"#fff\"\n          envMap={landscapeTexture}\n          transparent\n          side={DoubleSide}\n          opacity={opacity}\n        />\n      </mesh>\n\n      <mesh ref={leftWallRef}>\n        <boxBufferGeometry attach=\"geometry\" args={MESH_WALL_ARGS} />\n        <meshStandardMaterial\n          metalness={metalness}\n          roughness={roughness}\n          attach=\"material\"\n          color=\"#fff\"\n          envMap={landscapeTexture}\n          transparent\n          side={DoubleSide}\n          opacity={opacity}\n        />\n      </mesh>\n\n      <mesh ref={rightWallRef}>\n        <boxBufferGeometry attach=\"geometry\" args={MESH_WALL_ARGS} />\n        <meshStandardMaterial\n          metalness={metalness}\n          roughness={roughness}\n          attach=\"material\"\n          color=\"#fff\"\n          envMap={landscapeTexture}\n          transparent\n          side={DoubleSide}\n          opacity={opacity}\n        />\n      </mesh>\n\n      <mesh ref={frontWallRef}>\n        <boxBufferGeometry attach=\"geometry\" args={MESH_WALL_ARGS} />\n        <meshStandardMaterial\n          metalness={metalness}\n          roughness={roughness}\n          attach=\"material\"\n          color=\"#fff\"\n          envMap={landscapeTexture}\n          transparent\n          side={DoubleSide}\n          opacity={opacity}\n        />\n      </mesh>\n    </>\n  )\n}\n\nconst Scene = (props: {\n  setApi: (api: ApiType) => void\n  cubeState: string\n  setCubeState: (state: string) => void\n  cubeTexture: Texture[]\n  showRollResult: (i: number) => void\n}): JSX.Element => {\n  return (\n    <>\n      <ambientLight />\n      <pointLight\n        position={[10, 30, 10]}\n        intensity={1}\n        castShadow\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n        shadow-radius={10}\n      />\n      <Physics gravity={[0, GRAVITY, 0]}>\n        <Cube\n          setApi={props.setApi}\n          readyState={props.cubeState}\n          setReadyState={props.setCubeState}\n          textures={props.cubeTexture}\n          showRollResult={props.showRollResult}\n        />\n        <Planes />\n      </Physics>\n    </>\n  )\n}\n\nconst App = (): JSX.Element => {\n  const SPHERES = 4\n\n  const [isPostIndustrial, setIsPostIndustrial] = useState(false)\n  const [sphereIndex, setSphereIndexUnsafe] = useState(\n    Math.floor(Math.random() * SPHERES),\n  )\n\n  const setSphereIndex = (i: number): void => {\n    if (i <= SPHERES && i >= 0) setSphereIndexUnsafe(i)\n  }\n\n  const spheres = [\n    {\n      name: 'Atmosphere',\n      faces: atmosphereCubeFaces,\n      texture: atmosphereCubeTexture,\n      color: 'lightblue',\n    },\n    {\n      name: 'Biosphere',\n      faces: biosphereCubeFaces,\n      texture: biosphereCubeTexture,\n      color: 'green',\n    },\n    {\n      name: 'Hydrosphere',\n      faces: hydrosphereCubeFaces,\n      texture: hydrosphereCubeTexture,\n      color: 'blue',\n    },\n    {\n      name: 'Lithosphere',\n      faces: isPostIndustrial\n        ? lithospherePostCubeFaces\n        : lithospherePreCubeFaces,\n      texture: isPostIndustrial\n        ? lithospherePostCubeTexture\n        : lithospherePreCubeTexture,\n      color: 'black',\n    },\n  ]\n\n  const cubeFaces = spheres[sphereIndex].faces\n  const cubeTexture = spheres[sphereIndex].texture\n  const sphereName = spheres[sphereIndex].name\n\n  const [api, setApi] = useState<ApiType>()\n  const [cubeState, setCubeState] = useState('init')\n\n  const [rollResult, setRollResult] = useState<number | undefined>()\n  const [rollResultClass, setRollResultClass] = useState('hide')\n\n  const showRollResult = (i: number): void => {\n    setRollResultClass('show')\n    setRollResult(i)\n  }\n\n  const hideRollResult = (): void => {\n    setRollResultClass('hide')\n\n    setTimeout(() => {\n      setRollResult(undefined)\n    }, rollResultTransitionMs)\n  }\n\n  const rollDice = (): void => {\n    hideRollResult()\n\n    const { velocity, angularVelocity, position } = generatePhysicsProps()\n\n    api?.position.set(position.x, position.y, position.z)\n    api?.rotation.set(0, 0, 0)\n    api?.velocity.set(velocity.x, velocity.y, velocity.z)\n    api?.angularVelocity.set(\n      angularVelocity.x,\n      angularVelocity.y,\n      angularVelocity.z,\n    )\n    api?.mass?.set(DICE_MASS)\n\n    setCubeState('init')\n  }\n\n  const isValidRollResult =\n    rollResult != null && rollResult <= 5 && rollResult >= 0\n\n  return (\n    <div className=\"App\">\n      <Canvas\n        style={{ height: '100vh', width: '100%' }}\n        camera={{ position: [0, 16, 9.5], rotation: [-0.15, 0, 0] }}\n        shadowMap\n      >\n        <Scene\n          setApi={setApi}\n          cubeState={cubeState}\n          setCubeState={setCubeState}\n          cubeTexture={cubeTexture}\n          showRollResult={showRollResult}\n        />\n      </Canvas>\n      <div className={`roll-result-overlay ${rollResultClass}`}>\n        {isValidRollResult && (\n          <img src={cubeFaces[rollResult as number]} alt=\"\" />\n        )}\n      </div>\n\n      <div className=\"sphere-name\">\n        {sphereName}\n        {sphereName === 'Lithosphere' && (\n          <h6 style={{ margin: 0 }}>\n            ({isPostIndustrial ? 'post-industrial' : 'pre-industrial'})\n          </h6>\n        )}\n      </div>\n\n      <div className=\"right-side\">\n        <button className=\"roll-btn\" onClick={(): void => rollDice()}>\n          Roll\n        </button>\n        <div className=\"label\">\n          {isPostIndustrial ? 'Post-industrial' : 'Pre-industrial'}\n        </div>\n        <label className=\"switch industrial-switch\">\n          <input\n            type=\"checkbox\"\n            onChange={(evt): void => {\n              setIsPostIndustrial(evt.target.checked)\n            }}\n          />\n          <span className=\"slider round\"></span>\n        </label>\n        <div className=\"label\">Switch sphere:</div>\n        {spheres.map((data, i) => (\n          <button\n            key={data.name}\n            className=\"sphere-selector-button\"\n            style={{ color: data.color, borderColor: data.color }}\n            onClick={(): void => {\n              setSphereIndex(i)\n              hideRollResult()\n            }}\n          >\n            {data.name}\n          </button>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.info(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.info(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.info('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.info(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}